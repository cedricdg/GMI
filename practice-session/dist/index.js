'use strict';

var _draw = require('./lib/draw');

var draw = _interopRequireWildcard(_draw);

var _dataset = require('./lib/dataset');

var _dataset2 = _interopRequireDefault(_dataset);

var _recognizer = require('./lib/recognizer');

var _recognizer2 = _interopRequireDefault(_recognizer);

var _utils = require('./lib/utils');

var utils = _interopRequireWildcard(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var letsDraw = false;
var currentGesture = [];
var gestureID = 1;
var trainingMode = true;

var $drawing = document.querySelector('#drawCan');

var dataset = new _dataset2.default();
var myRecognizer = new _recognizer2.default();

// start when mouse is down
$drawing.addEventListener('touchstart', function (e) {
  e.preventDefault();
  console.log("touchstart");
  mouseDown(e);
});
// start when mouse is down
$drawing.addEventListener('touchmove', function (e) {
  e.preventDefault();
  console.log("touchmove");
  mouseMove(e);
});
// start when mouse is down
$drawing.addEventListener('touchend', function (e) {
  e.preventDefault();
  console.log("touchend");
  mouseUp(e);
});

// start when mouse is down
$drawing.addEventListener('mousedown', mouseDown);

var mouseDown = function mouseDown(e) {
  draw.drawGesture($drawing, 'down', e);
  var coordinates = draw.getMouseXYinCanvas($drawing, e);
  currentGesture.push(coordinates);
  console.log(coordinates);
  letsDraw = true;
};

// start when mouse is down
$drawing.addEventListener('mousemove', mouseMove);

var mouseMove = function mouseMove(e) {
  if (letsDraw) {
    draw.drawGesture($drawing, 'move', e);
    var coordinates = draw.getMouseXYinCanvas($drawing, e);
    currentGesture.push(coordinates);
    //console.log(coordinates);
  }
};

// stop when mouse is up
$drawing.addEventListener('mouseup', mouseUp);

var mouseUp = function mouseUp(e) {

  letsDraw = false;

  currentGesture = utils.scale(currentGesture);
  currentGesture = utils.translateToOrigin(currentGesture);
  // scale

  if (trainingMode) {
    dataset.addGestureWithLabel(currentGesture, gestureID);
    dataset.plotDatasetInHML();
    gestureID++;
  } else {
    var predictedLabel = myRecognizer.predict(currentGesture);
    console.log(predictedLabel);
  }

  currentGesture = [];
};

var $trainingButton = document.querySelector('#trainingButton');
$trainingButton.addEventListener('click', function (e) {
  trainingMode = true;
});

var $testingButton = document.querySelector('#testingButton');
$testingButton.addEventListener('click', function (e) {
  myRecognizer.fit(dataset);
  trainingMode = false;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImRyYXciLCJ1dGlscyIsImxldHNEcmF3IiwiY3VycmVudEdlc3R1cmUiLCJnZXN0dXJlSUQiLCJ0cmFpbmluZ01vZGUiLCIkZHJhd2luZyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImRhdGFzZXQiLCJteVJlY29nbml6ZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInByZXZlbnREZWZhdWx0IiwiY29uc29sZSIsImxvZyIsIm1vdXNlRG93biIsIm1vdXNlTW92ZSIsIm1vdXNlVXAiLCJkcmF3R2VzdHVyZSIsImNvb3JkaW5hdGVzIiwiZ2V0TW91c2VYWWluQ2FudmFzIiwicHVzaCIsInNjYWxlIiwidHJhbnNsYXRlVG9PcmlnaW4iLCJhZGRHZXN0dXJlV2l0aExhYmVsIiwicGxvdERhdGFzZXRJbkhNTCIsInByZWRpY3RlZExhYmVsIiwicHJlZGljdCIsIiR0cmFpbmluZ0J1dHRvbiIsIiR0ZXN0aW5nQnV0dG9uIiwiZml0Il0sIm1hcHBpbmdzIjoiOztBQUNBOztJQUFZQSxJOztBQUNaOzs7O0FBQ0E7Ozs7QUFDQTs7SUFBWUMsSzs7Ozs7O0FBRVosSUFBSUMsV0FBVyxLQUFmO0FBQ0EsSUFBSUMsaUJBQWlCLEVBQXJCO0FBQ0EsSUFBSUMsWUFBWSxDQUFoQjtBQUNBLElBQUlDLGVBQWUsSUFBbkI7O0FBRUEsSUFBTUMsV0FBV0MsU0FBU0MsYUFBVCxDQUF1QixVQUF2QixDQUFqQjs7QUFFQSxJQUFJQyxVQUFVLHVCQUFkO0FBQ0EsSUFBSUMsZUFBZSwwQkFBbkI7O0FBRUE7QUFDQUosU0FBU0ssZ0JBQVQsQ0FBMEIsWUFBMUIsRUFBd0MsVUFBU0MsQ0FBVCxFQUFZO0FBQ2hEQSxJQUFFQyxjQUFGO0FBQ0FDLFVBQVFDLEdBQVIsQ0FBWSxZQUFaO0FBQ0FDLFlBQVVKLENBQVY7QUFDSCxDQUpEO0FBS0E7QUFDQU4sU0FBU0ssZ0JBQVQsQ0FBMEIsV0FBMUIsRUFBdUMsVUFBU0MsQ0FBVCxFQUFZO0FBQy9DQSxJQUFFQyxjQUFGO0FBQ0FDLFVBQVFDLEdBQVIsQ0FBWSxXQUFaO0FBQ0FFLFlBQVVMLENBQVY7QUFDSCxDQUpEO0FBS0E7QUFDQU4sU0FBU0ssZ0JBQVQsQ0FBMEIsVUFBMUIsRUFBc0MsVUFBU0MsQ0FBVCxFQUFZO0FBQzlDQSxJQUFFQyxjQUFGO0FBQ0FDLFVBQVFDLEdBQVIsQ0FBWSxVQUFaO0FBQ0FHLFVBQVFOLENBQVI7QUFDSCxDQUpEOztBQU1BO0FBQ0FOLFNBQVNLLGdCQUFULENBQTBCLFdBQTFCLEVBQXVDSyxTQUF2Qzs7QUFFQSxJQUFNQSxZQUFZLFNBQVpBLFNBQVksQ0FBU0osQ0FBVCxFQUFZO0FBQzFCWixPQUFLbUIsV0FBTCxDQUFpQmIsUUFBakIsRUFBMkIsTUFBM0IsRUFBbUNNLENBQW5DO0FBQ0EsTUFBTVEsY0FBY3BCLEtBQUtxQixrQkFBTCxDQUF3QmYsUUFBeEIsRUFBa0NNLENBQWxDLENBQXBCO0FBQ0FULGlCQUFlbUIsSUFBZixDQUFvQkYsV0FBcEI7QUFDQU4sVUFBUUMsR0FBUixDQUFZSyxXQUFaO0FBQ0FsQixhQUFXLElBQVg7QUFDSCxDQU5EOztBQVFBO0FBQ0FJLFNBQVNLLGdCQUFULENBQTBCLFdBQTFCLEVBQXVDTSxTQUF2Qzs7QUFFQSxJQUFNQSxZQUFZLFNBQVpBLFNBQVksQ0FBU0wsQ0FBVCxFQUFZO0FBQzdCLE1BQUlWLFFBQUosRUFBYTtBQUNURixTQUFLbUIsV0FBTCxDQUFpQmIsUUFBakIsRUFBMkIsTUFBM0IsRUFBbUNNLENBQW5DO0FBQ0EsUUFBTVEsY0FBY3BCLEtBQUtxQixrQkFBTCxDQUF3QmYsUUFBeEIsRUFBa0NNLENBQWxDLENBQXBCO0FBQ0FULG1CQUFlbUIsSUFBZixDQUFvQkYsV0FBcEI7QUFDQTtBQUNBO0FBRUosQ0FSRDs7QUFVQTtBQUNBZCxTQUFTSyxnQkFBVCxDQUEwQixTQUExQixFQUFxQ08sT0FBckM7O0FBRUEsSUFBTUEsVUFBVSxTQUFWQSxPQUFVLENBQVNOLENBQVQsRUFBWTs7QUFFeEJWLGFBQVcsS0FBWDs7QUFFQUMsbUJBQWlCRixNQUFNc0IsS0FBTixDQUFZcEIsY0FBWixDQUFqQjtBQUNBQSxtQkFBaUJGLE1BQU11QixpQkFBTixDQUF3QnJCLGNBQXhCLENBQWpCO0FBQ0E7O0FBRUEsTUFBR0UsWUFBSCxFQUFnQjtBQUNqQkksWUFBUWdCLG1CQUFSLENBQTRCdEIsY0FBNUIsRUFBNENDLFNBQTVDO0FBQ0VLLFlBQVFpQixnQkFBUjtBQUNGdEI7QUFDQSxHQUpDLE1BSUk7QUFDTCxRQUFNdUIsaUJBQWlCakIsYUFBYWtCLE9BQWIsQ0FBcUJ6QixjQUFyQixDQUF2QjtBQUNBVyxZQUFRQyxHQUFSLENBQVlZLGNBQVo7QUFDQTs7QUFFRXhCLG1CQUFpQixFQUFqQjtBQUNKLENBbEJEOztBQW9CQSxJQUFNMEIsa0JBQWtCdEIsU0FBU0MsYUFBVCxDQUF1QixpQkFBdkIsQ0FBeEI7QUFDQXFCLGdCQUFnQmxCLGdCQUFoQixDQUFpQyxPQUFqQyxFQUEwQyxVQUFTQyxDQUFULEVBQVk7QUFDckRQLGlCQUFlLElBQWY7QUFDQSxDQUZEOztBQUlBLElBQU15QixpQkFBaUJ2QixTQUFTQyxhQUFULENBQXVCLGdCQUF2QixDQUF2QjtBQUNBc0IsZUFBZW5CLGdCQUFmLENBQWdDLE9BQWhDLEVBQXlDLFVBQVNDLENBQVQsRUFBWTtBQUNwREYsZUFBYXFCLEdBQWIsQ0FBaUJ0QixPQUFqQjtBQUNBSixpQkFBZSxLQUFmO0FBRUEsQ0FKRCIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0ICogYXMgZHJhdyBmcm9tICcuL2xpYi9kcmF3J1xuaW1wb3J0IERhdGFzZXQgZnJvbSAnLi9saWIvZGF0YXNldCdcbmltcG9ydCBSZWNvZ25pemVyIGZyb20gJy4vbGliL3JlY29nbml6ZXInXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL2xpYi91dGlscydcblxubGV0IGxldHNEcmF3ID0gZmFsc2U7XG5sZXQgY3VycmVudEdlc3R1cmUgPSBbXTtcbmxldCBnZXN0dXJlSUQgPSAxO1xubGV0IHRyYWluaW5nTW9kZSA9IHRydWU7XG5cbmNvbnN0ICRkcmF3aW5nID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2RyYXdDYW4nKTtcblxubGV0IGRhdGFzZXQgPSBuZXcgRGF0YXNldCgpO1xubGV0IG15UmVjb2duaXplciA9IG5ldyBSZWNvZ25pemVyKCk7XG5cbi8vIHN0YXJ0IHdoZW4gbW91c2UgaXMgZG93blxuJGRyYXdpbmcuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGZ1bmN0aW9uKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICBcdGNvbnNvbGUubG9nKFwidG91Y2hzdGFydFwiKTtcbiAgICBtb3VzZURvd24oZSk7XG59KTtcbi8vIHN0YXJ0IHdoZW4gbW91c2UgaXMgZG93blxuJGRyYXdpbmcuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgZnVuY3Rpb24oZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgIFx0Y29uc29sZS5sb2coXCJ0b3VjaG1vdmVcIik7XG4gICAgbW91c2VNb3ZlKGUpO1xufSk7XG4vLyBzdGFydCB3aGVuIG1vdXNlIGlzIGRvd25cbiRkcmF3aW5nLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgZnVuY3Rpb24oZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgIFx0Y29uc29sZS5sb2coXCJ0b3VjaGVuZFwiKTtcbiAgICBtb3VzZVVwKGUpO1xufSk7XG5cbi8vIHN0YXJ0IHdoZW4gbW91c2UgaXMgZG93blxuJGRyYXdpbmcuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgbW91c2VEb3duKTtcblxuY29uc3QgbW91c2VEb3duID0gZnVuY3Rpb24oZSkge1xuICAgXHRkcmF3LmRyYXdHZXN0dXJlKCRkcmF3aW5nLCAnZG93bicsIGUpO1xuICAgXHRjb25zdCBjb29yZGluYXRlcyA9IGRyYXcuZ2V0TW91c2VYWWluQ2FudmFzKCRkcmF3aW5nLCBlKTtcbiAgIFx0Y3VycmVudEdlc3R1cmUucHVzaChjb29yZGluYXRlcyk7XG4gICAgY29uc29sZS5sb2coY29vcmRpbmF0ZXMpO1xuICAgXHRsZXRzRHJhdyA9IHRydWU7XG59O1xuXG4vLyBzdGFydCB3aGVuIG1vdXNlIGlzIGRvd25cbiRkcmF3aW5nLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG1vdXNlTW92ZSk7XG5cbmNvbnN0IG1vdXNlTW92ZSA9IGZ1bmN0aW9uKGUpIHtcblx0aWYgKGxldHNEcmF3KXtcblx0ICAgXHRkcmF3LmRyYXdHZXN0dXJlKCRkcmF3aW5nLCAnbW92ZScsIGUpO1xuXHQgICBcdGNvbnN0IGNvb3JkaW5hdGVzID0gZHJhdy5nZXRNb3VzZVhZaW5DYW52YXMoJGRyYXdpbmcsIGUpO1xuXHQgICBcdGN1cnJlbnRHZXN0dXJlLnB1c2goY29vcmRpbmF0ZXMpO1xuICAgXHRcdC8vY29uc29sZS5sb2coY29vcmRpbmF0ZXMpO1xuXHQgICB9XG5cbn07XG5cbi8vIHN0b3Agd2hlbiBtb3VzZSBpcyB1cFxuJGRyYXdpbmcuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG1vdXNlVXApO1xuXG5jb25zdCBtb3VzZVVwID0gZnVuY3Rpb24oZSkge1xuXG4gICBcdGxldHNEcmF3ID0gZmFsc2U7XG5cbiAgICBjdXJyZW50R2VzdHVyZSA9IHV0aWxzLnNjYWxlKGN1cnJlbnRHZXN0dXJlKTtcbiAgICBjdXJyZW50R2VzdHVyZSA9IHV0aWxzLnRyYW5zbGF0ZVRvT3JpZ2luKGN1cnJlbnRHZXN0dXJlKTtcbiAgICAvLyBzY2FsZVxuXG4gICAgaWYodHJhaW5pbmdNb2RlKXtcblx0XHRcdGRhdGFzZXQuYWRkR2VzdHVyZVdpdGhMYWJlbChjdXJyZW50R2VzdHVyZSwgZ2VzdHVyZUlEKTtcbiAgIFx0XHRkYXRhc2V0LnBsb3REYXRhc2V0SW5ITUwoKTtcblx0XHRcdGdlc3R1cmVJRCsrO1xuXHRcdH0gZWxzZXtcblx0XHRcdGNvbnN0IHByZWRpY3RlZExhYmVsID0gbXlSZWNvZ25pemVyLnByZWRpY3QoY3VycmVudEdlc3R1cmUpO1xuXHRcdFx0Y29uc29sZS5sb2cocHJlZGljdGVkTGFiZWwpO1xuXHRcdH1cblxuXHQgICBcdGN1cnJlbnRHZXN0dXJlID0gW107XG59O1xuXG5jb25zdCAkdHJhaW5pbmdCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdHJhaW5pbmdCdXR0b24nKTtcbiR0cmFpbmluZ0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcblx0dHJhaW5pbmdNb2RlID0gdHJ1ZTtcbn0pO1xuXG5jb25zdCAkdGVzdGluZ0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0ZXN0aW5nQnV0dG9uJyk7XG4kdGVzdGluZ0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcblx0bXlSZWNvZ25pemVyLmZpdChkYXRhc2V0KTtcblx0dHJhaW5pbmdNb2RlID0gZmFsc2U7XG5cbn0pO1xuIl19