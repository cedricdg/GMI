'use strict';

var _draw = require('./lib/draw');

var draw = _interopRequireWildcard(_draw);

var _dataset = require('./lib/dataset');

var _dataset2 = _interopRequireDefault(_dataset);

var _recognizer = require('./lib/recognizer');

var _recognizer2 = _interopRequireDefault(_recognizer);

var _utils = require('./lib/utils');

var utils = _interopRequireWildcard(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var letsDraw = false;
var currentGesture = [];
var gestureID = 1;
var trainingMode = true;

var $drawing = document.querySelector('#drawCan');
var $copyDialog = document.querySelector('#copyDialog');
var $boxHeader = document.querySelector('#boxHeader');
var $copyModal = document.querySelector('#copyModal');
var $copyModalText = document.querySelector('#copyModalText');
var $leftSideBar = document.querySelector('#leftSideBar');
var $rightSideBar = document.querySelector('#rightSideBar');
var $input1 = document.querySelector('#inputAgree');
var $input2 = document.querySelector('#inputDisagree');
var $pasteModalPreview = document.querySelector('#pasteModalPreview');
var $selectableText = document.querySelector('#selectableText');

var dataset = new _dataset2.default();
var myRecognizer = new _recognizer2.default();

var MODE_DEFINE_COPY = "define_copy";
var MODE_DEFINE_PASTE = "define_paste";
var MODE_DEFINE_OTHERS = "define_others";

var MODE_DEFINE_GESTURES = "define_gestures";
var MODE_DEFAULT = "default";
var MODE_COPY = "copy";
var MODE_COPIED = "copied";
var MODE_PASTE = "paste";

var currentMode = MODE_DEFINE_GESTURES;

var clipboard = "";
var selection = "";

var changeMode = function changeMode(newMode) {
  console.log("Change mode to: " + newMode);

  switch (newMode) {
    case MODE_DEFAULT:
      hideModal();
      break;
    case MODE_COPY:
      selection = "";
      showModal("Mark text to copy", "#fefefe");
      break;
    case MODE_COPIED:
      showModal("Text copied successfully", "#fefefe");
      break;
    case MODE_PASTE:
      showModal("Select field to paste text", "#fefefe");
      break;
    default:

  }
  currentMode = newMode;
};

function showModal(text, color) {
  console.log($copyModalText);
  $copyModalText.innerText = text;
  $copyModal.style.display = "none";
  $copyModal.style.display = "block";
}

function hideModal() {
  $copyModal.style.display = "none";
}

function mouseDownOnSide(e) {
  e = e || window.event;
  switch (e.which) {
    case 1:
      alert('left');break;
    case 2:
      alert('middle');break;
    case 3:
      alert('right');break;
  }
}

if (typeof window.orientation !== 'undefined') {

  $input1.addEventListener('touchstart', function (e) {
    e.preventDefault();
    clickOnInput($input1);
  });
  $input2.addEventListener('touchstart', function (e) {
    e.preventDefault();
    clickOnInput($input2);
  });

  $rightSideBar.addEventListener('touchstart', function (e) {
    e.preventDefault();
    mouseDownSideBar(e);
  });

  $leftSideBar.addEventListener('touchstart', function (e) {
    e.preventDefault();
    mouseDownSideBar(e);
  });

  // start when mouse is down
  $drawing.addEventListener('touchstart', function (e) {
    e.preventDefault();
    console.log("touchstart");
    mouseDown(e);
  });

  // start when mouse is down
  $drawing.addEventListener('touchmove', function (e) {
    e.preventDefault();
    console.log("touchmove");
    mouseMove(e);
  });

  // start when mouse is down
  $drawing.addEventListener('touchend', function (e) {
    e.preventDefault();
    console.log("touchend");
    mouseUp(e);
  });

  document.addEventListener('touchend', function (e) {
    console.log("Touched text");
    if (currentMode == MODE_COPY && selection != "") {
      console.log("Write to clipboard: ");
      console.log(selection);
      clipboard = selection;
      changeMode(MODE_COPIED);
    }
  });
} else {
  $input1.addEventListener('mousedown', function (e) {
    e.preventDefault();
    clickOnInput($input1);
  });
  $input2.addEventListener('mousedown', function (e) {
    e.preventDefault();
    clickOnInput($input2);
  });

  $rightSideBar.addEventListener('mousedown', function (e) {
    mouseDownSideBar(e);
  });

  $leftSideBar.addEventListener('mousedown', function (e) {
    mouseDownSideBar(e);
  });

  // start when mouse is down
  $drawing.addEventListener('mousedown', function (e) {
    console.log("mousedown");
    mouseDown(e);
  });

  // start when mouse is down
  $drawing.addEventListener('mousemove', function (e) {
    console.log("mousemove");
    mouseMove(e);
  });

  // stop when mouse is up
  $drawing.addEventListener('mouseup', function (e) {
    console.log("mouseup");
    mouseUp(e);
  });

  document.addEventListener('mouseup', function (e) {
    console.log("Touched text");
    if (currentMode == MODE_COPY && selection != "") {
      console.log("Write to clipboard: ");
      console.log(selection);
      clipboard = selection;
      changeMode(MODE_COPIED);
    }
  });
}

var mouseDownSideBar = function mouseDownSideBar(e) {
  $drawing.style.display = "initial";
  mouseDown(e);
};

var clickOnInput = function clickOnInput(inputField) {
  inputField.innerText = clipboard;
  clipboard = "";
  changeMode(MODE_DEFAULT);
};

var mouseDown = function mouseDown(e) {
  var coordinates = draw.getMouseXYinCanvas($drawing, e);
  draw.drawGesture($drawing, 'down', coordinates);
  currentGesture.push(coordinates);
  console.log(coordinates);
  letsDraw = true;
};

var mouseMove = function mouseMove(e) {
  if (letsDraw) {
    var coordinates = draw.getMouseXYinCanvas($drawing, e);
    draw.drawGesture($drawing, 'move', coordinates);
    currentGesture.push(coordinates);
    //console.log(coordinates);
  }
};

var mouseUp = function mouseUp(e) {
  letsDraw = false;

  currentGesture = utils.scale(currentGesture);
  currentGesture = utils.translateToOrigin(currentGesture);
  currentGesture = utils.resample(currentGesture, 30);

  // scale

  if (trainingMode) {
    dataset.addGestureWithLabel(currentGesture, gestureID);
    dataset.plotDatasetInHML();
    gestureID++;
  } else {
    var predictedLabel = myRecognizer.predict(currentGesture);
    console.log(predictedLabel);

    if (predictedLabel === 1) {
      changeMode(MODE_COPY);
    } else if (predictedLabel === 2) {
      if (clipboard !== "") {
        changeMode(MODE_PASTE);
      } else {
        window.alert("Copy text before you paste it");
      }
    } else {}
  }
  $drawing.style.display = "none";
  currentGesture = [];
};

document.addEventListener("selectionchange", function () {
  if (currentMode == MODE_COPY) {
    var selectedText = window.getSelection();
    console.log("Selected Text: " + selectedText.toString());
    selection = selectedText.toString();
  }
});

var $trainingButton = document.querySelector('#trainingButton');
$trainingButton.addEventListener('click', function (e) {
  trainingMode = !trainingMode;
  if (trainingMode) {
    $trainingButton.innerHTML = "Activate Testing";
    $boxHeader.innerHTML = "TRAINING MODE";
  } else {
    myRecognizer.fit(dataset);
    $trainingButton.innerHTML = "Activate Training";
    $boxHeader.innerHTML = "TESTING MODE";
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,