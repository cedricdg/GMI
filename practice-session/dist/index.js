'use strict';

var _draw = require('./lib/draw');

var draw = _interopRequireWildcard(_draw);

var _dataset = require('./lib/dataset');

var _dataset2 = _interopRequireDefault(_dataset);

var _recognizer = require('./lib/recognizer');

var _recognizer2 = _interopRequireDefault(_recognizer);

var _utils = require('./lib/utils');

var utils = _interopRequireWildcard(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var letsDraw = false;
var currentGesture = [];
var gestureID = 1;
var trainingMode = true;

var $drawing = document.querySelector('#drawCan');

var dataset = new _dataset2.default();
var myRecognizer = new _recognizer2.default();

// start when mouse is down
$drawing.addEventListener('mousedown', function (e) {
	draw.drawGesture($drawing, 'down', e);
	var coordinates = draw.getMouseXYinCanvas($drawing, e);
	currentGesture.push(coordinates);
	console.log(coordinates);
	letsDraw = true;
});

// start when mouse is down
$drawing.addEventListener('mousemove', function (e) {
	if (letsDraw) {
		draw.drawGesture($drawing, 'move', e);
		var coordinates = draw.getMouseXYinCanvas($drawing, e);
		currentGesture.push(coordinates);
		//console.log(coordinates);
	}
});

// stop when mouse is up
$drawing.addEventListener('mouseup', function (e) {

	letsDraw = false;

	currentGesture = utils.scale(currentGesture);
	currentGesture = utils.translateToOrigin(currentGesture);
	// scale

	if (trainingMode) {
		dataset.addGestureWithLabel(currentGesture, gestureID);
		dataset.plotDatasetInHML();
		gestureID++;
	} else {
		var predictedLabel = myRecognizer.predict(currentGesture);
		console.log(predictedLabel);
	}

	currentGesture = [];
});

var $trainingButton = document.querySelector('#trainingButton');
$trainingButton.addEventListener('click', function (e) {
	trainingMode = true;
});

var $testingButton = document.querySelector('#testingButton');
$testingButton.addEventListener('click', function (e) {
	myRecognizer.fit(dataset);
	trainingMode = false;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImRyYXciLCJ1dGlscyIsImxldHNEcmF3IiwiY3VycmVudEdlc3R1cmUiLCJnZXN0dXJlSUQiLCJ0cmFpbmluZ01vZGUiLCIkZHJhd2luZyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImRhdGFzZXQiLCJteVJlY29nbml6ZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsImRyYXdHZXN0dXJlIiwiY29vcmRpbmF0ZXMiLCJnZXRNb3VzZVhZaW5DYW52YXMiLCJwdXNoIiwiY29uc29sZSIsImxvZyIsInNjYWxlIiwidHJhbnNsYXRlVG9PcmlnaW4iLCJhZGRHZXN0dXJlV2l0aExhYmVsIiwicGxvdERhdGFzZXRJbkhNTCIsInByZWRpY3RlZExhYmVsIiwicHJlZGljdCIsIiR0cmFpbmluZ0J1dHRvbiIsIiR0ZXN0aW5nQnV0dG9uIiwiZml0Il0sIm1hcHBpbmdzIjoiOztBQUNBOztJQUFZQSxJOztBQUNaOzs7O0FBQ0E7Ozs7QUFDQTs7SUFBWUMsSzs7Ozs7O0FBRVosSUFBSUMsV0FBVyxLQUFmO0FBQ0EsSUFBSUMsaUJBQWlCLEVBQXJCO0FBQ0EsSUFBSUMsWUFBWSxDQUFoQjtBQUNBLElBQUlDLGVBQWUsSUFBbkI7O0FBRUEsSUFBTUMsV0FBV0MsU0FBU0MsYUFBVCxDQUF1QixVQUF2QixDQUFqQjs7QUFFQSxJQUFJQyxVQUFVLHVCQUFkO0FBQ0EsSUFBSUMsZUFBZSwwQkFBbkI7O0FBRUE7QUFDQUosU0FBU0ssZ0JBQVQsQ0FBMEIsV0FBMUIsRUFBdUMsVUFBU0MsQ0FBVCxFQUFZO0FBQy9DWixNQUFLYSxXQUFMLENBQWlCUCxRQUFqQixFQUEyQixNQUEzQixFQUFtQ00sQ0FBbkM7QUFDQSxLQUFNRSxjQUFjZCxLQUFLZSxrQkFBTCxDQUF3QlQsUUFBeEIsRUFBa0NNLENBQWxDLENBQXBCO0FBQ0FULGdCQUFlYSxJQUFmLENBQW9CRixXQUFwQjtBQUNBRyxTQUFRQyxHQUFSLENBQVlKLFdBQVo7QUFDQVosWUFBVyxJQUFYO0FBQ0gsQ0FORDs7QUFRQTtBQUNBSSxTQUFTSyxnQkFBVCxDQUEwQixXQUExQixFQUF1QyxVQUFTQyxDQUFULEVBQVk7QUFDbEQsS0FBSVYsUUFBSixFQUFhO0FBQ1RGLE9BQUthLFdBQUwsQ0FBaUJQLFFBQWpCLEVBQTJCLE1BQTNCLEVBQW1DTSxDQUFuQztBQUNBLE1BQU1FLGNBQWNkLEtBQUtlLGtCQUFMLENBQXdCVCxRQUF4QixFQUFrQ00sQ0FBbEMsQ0FBcEI7QUFDQVQsaUJBQWVhLElBQWYsQ0FBb0JGLFdBQXBCO0FBQ0E7QUFDQTtBQUVKLENBUkQ7O0FBVUE7QUFDQVIsU0FBU0ssZ0JBQVQsQ0FBMEIsU0FBMUIsRUFBcUMsVUFBU0MsQ0FBVCxFQUFZOztBQUU3Q1YsWUFBVyxLQUFYOztBQUVBQyxrQkFBaUJGLE1BQU1rQixLQUFOLENBQVloQixjQUFaLENBQWpCO0FBQ0FBLGtCQUFpQkYsTUFBTW1CLGlCQUFOLENBQXdCakIsY0FBeEIsQ0FBakI7QUFDQTs7QUFFQSxLQUFHRSxZQUFILEVBQWdCO0FBQ2pCSSxVQUFRWSxtQkFBUixDQUE0QmxCLGNBQTVCLEVBQTRDQyxTQUE1QztBQUNFSyxVQUFRYSxnQkFBUjtBQUNGbEI7QUFDQSxFQUpDLE1BSUk7QUFDTCxNQUFNbUIsaUJBQWlCYixhQUFhYyxPQUFiLENBQXFCckIsY0FBckIsQ0FBdkI7QUFDQWMsVUFBUUMsR0FBUixDQUFZSyxjQUFaO0FBQ0E7O0FBRUVwQixrQkFBaUIsRUFBakI7QUFDSixDQWxCRDs7QUFvQkEsSUFBTXNCLGtCQUFrQmxCLFNBQVNDLGFBQVQsQ0FBdUIsaUJBQXZCLENBQXhCO0FBQ0FpQixnQkFBZ0JkLGdCQUFoQixDQUFpQyxPQUFqQyxFQUEwQyxVQUFTQyxDQUFULEVBQVk7QUFDckRQLGdCQUFlLElBQWY7QUFDQSxDQUZEOztBQUlBLElBQU1xQixpQkFBaUJuQixTQUFTQyxhQUFULENBQXVCLGdCQUF2QixDQUF2QjtBQUNBa0IsZUFBZWYsZ0JBQWYsQ0FBZ0MsT0FBaEMsRUFBeUMsVUFBU0MsQ0FBVCxFQUFZO0FBQ3BERixjQUFhaUIsR0FBYixDQUFpQmxCLE9BQWpCO0FBQ0FKLGdCQUFlLEtBQWY7QUFFQSxDQUpEIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgKiBhcyBkcmF3IGZyb20gJy4vbGliL2RyYXcnXG5pbXBvcnQgRGF0YXNldCBmcm9tICcuL2xpYi9kYXRhc2V0J1xuaW1wb3J0IFJlY29nbml6ZXIgZnJvbSAnLi9saWIvcmVjb2duaXplcidcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vbGliL3V0aWxzJ1xuXG5sZXQgbGV0c0RyYXcgPSBmYWxzZTtcbmxldCBjdXJyZW50R2VzdHVyZSA9IFtdO1xubGV0IGdlc3R1cmVJRCA9IDE7XG5sZXQgdHJhaW5pbmdNb2RlID0gdHJ1ZTtcblxuY29uc3QgJGRyYXdpbmcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZHJhd0NhbicpO1xuXG5sZXQgZGF0YXNldCA9IG5ldyBEYXRhc2V0KCk7XG5sZXQgbXlSZWNvZ25pemVyID0gbmV3IFJlY29nbml6ZXIoKTtcblxuLy8gc3RhcnQgd2hlbiBtb3VzZSBpcyBkb3duXG4kZHJhd2luZy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbihlKSB7XG4gICBcdGRyYXcuZHJhd0dlc3R1cmUoJGRyYXdpbmcsICdkb3duJywgZSk7XG4gICBcdGNvbnN0IGNvb3JkaW5hdGVzID0gZHJhdy5nZXRNb3VzZVhZaW5DYW52YXMoJGRyYXdpbmcsIGUpO1xuICAgXHRjdXJyZW50R2VzdHVyZS5wdXNoKGNvb3JkaW5hdGVzKTtcbiAgICBjb25zb2xlLmxvZyhjb29yZGluYXRlcyk7XG4gICBcdGxldHNEcmF3ID0gdHJ1ZTtcbn0pO1xuXG4vLyBzdGFydCB3aGVuIG1vdXNlIGlzIGRvd25cbiRkcmF3aW5nLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGZ1bmN0aW9uKGUpIHtcblx0aWYgKGxldHNEcmF3KXtcblx0ICAgXHRkcmF3LmRyYXdHZXN0dXJlKCRkcmF3aW5nLCAnbW92ZScsIGUpO1xuXHQgICBcdGNvbnN0IGNvb3JkaW5hdGVzID0gZHJhdy5nZXRNb3VzZVhZaW5DYW52YXMoJGRyYXdpbmcsIGUpO1xuXHQgICBcdGN1cnJlbnRHZXN0dXJlLnB1c2goY29vcmRpbmF0ZXMpO1xuICAgXHRcdC8vY29uc29sZS5sb2coY29vcmRpbmF0ZXMpO1xuXHQgICB9XG5cbn0pO1xuXG4vLyBzdG9wIHdoZW4gbW91c2UgaXMgdXBcbiRkcmF3aW5nLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBmdW5jdGlvbihlKSB7XG5cbiAgIFx0bGV0c0RyYXcgPSBmYWxzZTtcblxuICAgIGN1cnJlbnRHZXN0dXJlID0gdXRpbHMuc2NhbGUoY3VycmVudEdlc3R1cmUpO1xuICAgIGN1cnJlbnRHZXN0dXJlID0gdXRpbHMudHJhbnNsYXRlVG9PcmlnaW4oY3VycmVudEdlc3R1cmUpO1xuICAgIC8vIHNjYWxlXG5cbiAgICBpZih0cmFpbmluZ01vZGUpe1xuXHRcdFx0ZGF0YXNldC5hZGRHZXN0dXJlV2l0aExhYmVsKGN1cnJlbnRHZXN0dXJlLCBnZXN0dXJlSUQpO1xuICAgXHRcdGRhdGFzZXQucGxvdERhdGFzZXRJbkhNTCgpO1xuXHRcdFx0Z2VzdHVyZUlEKys7XG5cdFx0fSBlbHNle1xuXHRcdFx0Y29uc3QgcHJlZGljdGVkTGFiZWwgPSBteVJlY29nbml6ZXIucHJlZGljdChjdXJyZW50R2VzdHVyZSk7XG5cdFx0XHRjb25zb2xlLmxvZyhwcmVkaWN0ZWRMYWJlbCk7XG5cdFx0fVxuXG5cdCAgIFx0Y3VycmVudEdlc3R1cmUgPSBbXTtcbn0pO1xuXG5jb25zdCAkdHJhaW5pbmdCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdHJhaW5pbmdCdXR0b24nKTtcbiR0cmFpbmluZ0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcblx0dHJhaW5pbmdNb2RlID0gdHJ1ZTtcbn0pO1xuXG5jb25zdCAkdGVzdGluZ0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0ZXN0aW5nQnV0dG9uJyk7XG4kdGVzdGluZ0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcblx0bXlSZWNvZ25pemVyLmZpdChkYXRhc2V0KTtcblx0dHJhaW5pbmdNb2RlID0gZmFsc2U7XG5cbn0pO1xuIl19